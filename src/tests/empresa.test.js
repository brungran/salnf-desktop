import empresa from '../db/models/empresa.js';
import { expect, it, test } from 'vitest';
import { Faker, pt_BR, en, simpleFaker } from '@faker-js/faker';
import dayjs from 'dayjs'
import customParseFormat from 'dayjs/plugin/customParseFormat'
import utc from 'dayjs/plugin/utc'
import { test_db } from '../db/db.js';
import schema from '../db/schema.js';

dayjs.extend(customParseFormat)
dayjs.extend(utc)

const customFaker = new Faker({ locale: [pt_BR, en] });
const expectedObject = {changes: 1}

function get_DB(){
    const db = test_db();
    schema(db).setup();
    return db;
}

function randomEmpresa(){
    return {
        'id': simpleFaker.number.int({min: 1}),
        'cnpj': simpleFaker.string.numeric(14),
        'nome': customFaker.company.name(),
        'razao': customFaker.company.catchPhrase(),
        'vencimento': customFaker.date.soon(15).toLocaleDateString('en-CA'),
        'acesso': customFaker.internet.exampleEmail(),
        'obs': simpleFaker.string.alphanumeric(100),
    }
}

function parseDateInput(input) {
  const parsed = dayjs(input, 'DD/MM/YYYY', true) // true = modo estrito
  if (!parsed.isValid()) {
    throw new Error(`Data invÃ¡lida: ${input}`)
  }
  return parsed.utc().format('YYYY-MM-DD') // saÃ­da no formato do banco
}




it('nÃ£o insere empresa com campo inexistente na tabela', () => {
    const emp = randomEmpresa();
    emp.endereÃ§o = customFaker.location.streetAddress();
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
// id ///////////////////////////////////////////////////////////////////////
//insert
test.each([
    simpleFaker.string.alpha(),
    simpleFaker.number.int(10) * (-1),
    0,
    simpleFaker.number.float(),
    "      ",
    "",
])(`nÃ£o insere empresa com id invÃ¡lido igual a %s`, (data) => {
    const emp = randomEmpresa();
    emp.id = data;
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
test.each([
    simpleFaker.number.int(),
    simpleFaker.string.numeric(),
    null,
    undefined,
])('insere empresa com id vÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.id = data;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})


//select
it("dÃ¡ select all na tabela", () => {
    const db = get_DB();
    empresa(db).insert(randomEmpresa());
    empresa(db).insert(randomEmpresa());
    empresa(db).insert(randomEmpresa());
    expect(empresa(db).all()).toEqual(expect.arrayContaining(
        [{
            "id": expect.any(Number),
            "cnpj": expect.any(String),
            "nome": expect.any(String),
            "razao": expect.any(String),
            "vencimento": expect.any(String),
            "acesso": expect.any(String),
            "obs": expect.any(String)
        }]
    ));
})
it("busca empresas com certos campos com certas condiÃ§Ãµes", () => {
    const db = get_DB();
    const emp = randomEmpresa();
    empresa(db).insert(emp);
    empresa(db).insert(randomEmpresa());
    empresa(db).insert(randomEmpresa());
    const fields = {
        "id": expect.any(Number),
        "nome": expect.any(String),
    };
    const where = {
        "id" : emp.id,
        "cnpj": emp.cnpj
    }
    expect(empresa(db).select(Object.keys(fields), where)).toEqual(expect.arrayContaining([fields]));
})
it("nÃ£o busca empresas com campos inexistentes", () => {
    const db = get_DB();
    const emp = randomEmpresa();
    empresa(db).insert(emp);
    empresa(db).insert(randomEmpresa());
    empresa(db).insert(randomEmpresa());
    const fields = {
        "id": expect.any(Number),
        "endereÃ§o": expect.any(String),
    };
    const where = {
        "id" : emp.id,
        "cnpj": emp.cnpj
    }
    expect(() => empresa(db).select(Object.keys(fields), where)).toThrowError();
})
it("nÃ£o busca empresas com campos inexistentes na clÃ¡usula where", () => {
    const db = get_DB();
    const emp = randomEmpresa();
    empresa(db).insert(emp);
    empresa(db).insert(randomEmpresa());
    empresa(db).insert(randomEmpresa());
    const fields = {
        "id": expect.any(Number),
        "cnpj": expect.any(String),
    };
    const where = {
        "id" : emp.id,
        "endereÃ§o": customFaker.location.streetAddress()
    }
    expect(() => empresa(db).select(Object.keys(fields), where)).toThrowError();
})
it("retorna resultado vazio ao buscar empresas com condiÃ§Ãµes insatisfeitas", () => {
    const db = get_DB();
    const emp = randomEmpresa();
    empresa(db).insert(emp);
    empresa(db).insert(randomEmpresa());
    empresa(db).insert(randomEmpresa());
    const fields = {
        "id": expect.any(Number),
        "cnpj": expect.any(String),
    };
    const where = {
        "id" : simpleFaker.number.int(),
    }
    expect(empresa(db).select(Object.keys(fields), where)).toHaveLength(0);
})

// cnpj ///////////////////////////////////////////////////////////////////////
test.each([
    simpleFaker.string.alphanumeric(14),
    simpleFaker.string.numeric(13),
    simpleFaker.string.numeric(15),
    Number(simpleFaker.string.numeric(14)) * (-1),
    Number(simpleFaker.string.numeric(13)) * (-1),
    14.002000000701,
    "      ",
    ''
])(`nÃ£o insere empresa com cnpj invÃ¡lido igual a %s`, (data) => {
    const emp = randomEmpresa();
    emp.cnpj = data;
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
it('nÃ£o insere uma empresa com cnpj duplicado', () => {
    const empresa1 = randomEmpresa();
    const cnpj_a_duplicar = empresa1.cnpj;
    const empresa2 = randomEmpresa();
    empresa2.cnpj = cnpj_a_duplicar;
    const db = get_DB();
    empresa(db).insert(empresa1)
    expect(() => empresa(db).insert(empresa2)).toThrowError();
})
test.each([
    null,
    undefined,
    simpleFaker.string.numeric(14),
    '00000000000000',
])(`insere empresa com cnpj vÃ¡lido igual a %s`, (data) => {
    const emp = randomEmpresa();
    emp.cnpj = data;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})

// nome ///////////////////////////////////////////////////////////////////////
test.each([
    "",
    "       ",
    null,
    undefined
])('nÃ£o insere empresa com nome invÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.nome = data;
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
test.each([
    customFaker.company.name()
])('insere empresa com nome vÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.nome = data;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})

// razao ///////////////////////////////////////////////////////////////////////
test.each([
    "",
    "       ",
])('nÃ£o insere empresa com razao invÃ¡lida igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.razao = data;
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
test.each([
    null,
    undefined,
    customFaker.company.catchPhrase()
])('insere empresa com razao vÃ¡lida igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.razao = data;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})

// vencimento ///////////////////////////////////////////////////////////////////////
test.each([
    simpleFaker.number.int(),
    simpleFaker.string.alphanumeric(),
    "99/99/9999",
    "2025/06/14",
    "2025-06-14",
    "01/01/0001",
    "00/00/0000",
])('nÃ£o insere empresa com vencimento invÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    expect(() => {
        emp.vencimento = parseDateInput(data);
        empresa(get_DB()).insert(emp);
    }).toThrowError();
})
test.each([
    "",
    null,
    undefined,
    "12/05/2025",
])('insere empresa com vencimento vÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.vencimento = data? parseDateInput(data) : null;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})

// acesso ///////////////////////////////////////////////////////////////////////
test.each([
    "            ",
    "",
])('nÃ£o insere empresa com acesso invÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.acesso = data;
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
test.each([
    null,
    undefined,
    customFaker.internet.email(),
    customFaker.internet.url(),
    simpleFaker.string.alphanumeric(100)
])('insere empresa com acesso vÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.acesso = data;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})

// obs ///////////////////////////////////////////////////////////////////////
test.each([
    "            ",
    "",
])('nÃ£o insere empresa com obs invÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.obs = data;
    expect(() => empresa(get_DB()).insert(emp)).toThrowError();
})
test.each([
    null,
    undefined,
    simpleFaker.string.alphanumeric(100)
])('insere empresa com obs vÃ¡lido igual a %s', (data) => {
    const emp = randomEmpresa();
    emp.acesso = data;
    const result = empresa(get_DB()).insert(emp);
    expect(result).toMatchObject(expectedObject);
})

/* 
ğŸ“Œ InserÃ§Ã£o
    ğŸ“‹ id
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.
    ğŸ“‹ cnpj
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.
        âœ… Falha ao inserir duplicado.
    ğŸ“‹ nome
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.
    ğŸ“‹ razao
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.
    ğŸ“‹ vencimento
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.
    ğŸ“‹ acesso
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.
    ğŸ“‹ observaÃ§Ãµes
        âœ… Insere vÃ¡lido.
        âœ… Falha ao inserir invÃ¡lido.

    âœ… Ignora campos extras nÃ£o definidos no schema.

ğŸ“Œ SeleÃ§Ã£o
    Retorna todas as empresas existentes corretamente.
    Retorna empresa por id existente.
    Retorna undefined ou null para id inexistente.

ğŸ“Œ AtualizaÃ§Ã£o
    NÃ£o afeta nenhuma empresa se o id nÃ£o existir.
    Falha se passar valores invÃ¡lidos no update (ex: cnpj vazio).
    Atualiza corretamente uma empresa existente.

ğŸ“Œ RemoÃ§Ã£o
    NÃ£o lanÃ§a erro ao tentar deletar id inexistente.
    ApÃ³s exclusÃ£o, a empresa realmente desaparece do banco.
    Deleta empresa por id existente.
*/